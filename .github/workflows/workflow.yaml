name: Terraform Validate and Test

on:
  pull_request:
    branches:
    - main
  push:
    paths:
    - 'terraform/**'
    - '.github/workflows/workflow.yaml'

jobs:
  validate:
    name: Validate
    runs-on: ez-rancher
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.26

      - name: Terraform Format
        run: terraform fmt -check -recursive -diff .

      - name: Terraform Init
        run: |
          ../../hack/gh_actions_install_rke_provider.sh
          terraform init
        working-directory: ./terraform/vsphere-rancher

      - name: Validate
        run: terraform validate
        working-directory: ./terraform/vsphere-rancher

      - name: Generate SSH Keys
        run: |
          rm -f ~/.ssh/id_rsa*
          ssh-keygen -q -t rsa -N '' -f ~/.ssh/id_rsa

      - name: Deploy Test Env
        working-directory: ./terraform/vsphere-rancher
        env:
          TF_VAR_control_plane_count: 1
          TF_VAR_worker_count: 2
          TF_VAR_vm_template_name: bionic-server-cloudimg-amd64
          TF_VAR_vsphere_vcenter: ${{ secrets.TF_VSPHERE_VCENTER }}
          TF_VAR_vsphere_user: ${{ secrets.TF_VSPHERE_USER }}
          TF_VAR_vsphere_password: ${{ secrets.TF_VSPHERE_PASSWORD }}
          TF_VAR_vsphere_unverified_ssl: true
          TF_VAR_vsphere_datacenter: ${{ secrets.TF_VSPHERE_DATACENTER }}
          TF_VAR_vm_datastore: ${{ secrets.TF_VM_DATASTORE }}
          TF_VAR_vm_network: ${{ secrets.TF_VM_NETWORK }}
          TF_VAR_vsphere_vm_folder: ${{ secrets.TF_VSPHERE_VM_FOLDER }}
          TF_VAR_vm_domain: example.net
          TF_VAR_rancher_server_url: ${{ secrets.TF_RANCHER_SERVER_URL }}
          TF_VAR_rancher_password: ${{ secrets.TF_RANCHER_PASSWORD }}
          TF_VAR_bootstrap_rancher: true
          TF_VAR_vsphere_resource_pool: ${{ secrets.TF_VSPHERE_RESOURCE_POOL }}
        run: |
          COMMIT_ID=$(git rev-parse --short HEAD)
          terraform apply -input="false" -auto-approve -var="vm_name=${COMMIT_ID}"

      - name: Cleanup Test Env
        if: ${{ always() }}
        env:
          TF_VAR_control_plane_count: 1
          TF_VAR_worker_count: 2
          TF_VAR_vm_template_name: bionic-server-cloudimg-amd64
          TF_VAR_vsphere_vcenter: ${{ secrets.TF_VSPHERE_VCENTER }}
          TF_VAR_vsphere_user: ${{ secrets.TF_VSPHERE_USER }}
          TF_VAR_vsphere_password: ${{ secrets.TF_VSPHERE_PASSWORD }}
          TF_VAR_vsphere_unverified_ssl: true
          TF_VAR_vsphere_datacenter: ${{ secrets.TF_VSPHERE_DATACENTER }}
          TF_VAR_vm_datastore: ${{ secrets.TF_VM_DATASTORE }}
          TF_VAR_vm_network: ${{ secrets.TF_VM_NETWORK }}
          TF_VAR_vsphere_vm_folder: ${{ secrets.TF_VSPHERE_VM_FOLDER }}
          TF_VAR_vm_domain: example.net
          TF_VAR_rancher_server_url: ${{ secrets.TF_RANCHER_SERVER_URL }}
          TF_VAR_rancher_password: ${{ secrets.TF_RANCHER_PASSWORD }}
          TF_VAR_bootstrap_rancher: true
          TF_VAR_vsphere_resource_pool: ${{ secrets.TF_VSPHERE_RESOURCE_POOL }}
        working-directory: ./terraform/vsphere-rancher
        run: |
          COMMIT_ID=$(git rev-parse --short HEAD)
          terraform destroy -input="false" -auto-approve -var="vm_name=${COMMIT_ID}"